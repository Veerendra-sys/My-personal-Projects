# -*- coding: utf-8 -*-
"""Data Cleaning on HR Data Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sY6mS7s9i2EraFzwCXXsqw83gEcdji8q
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import OneHotEncoder
import warnings
warnings.filterwarnings('ignore')
from sklearn.svm import SVC
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

aug_train = pd.read_csv(r'/content/aug_test.csv')
aug_test = pd.read_csv(r'/content/aug_train.csv')
df=pd.read_csv("/content/sample_submission.csv")

df.head()

df.tail()

df.describe()

df.isnull().sum()

df.isnull().sum().sum()

aug_train.head()

aug_train.tail()

aug_train.info

aug_train.columns

aug_train.shape

# basic descriptive statistics view for train data
aug_train.describe()

aug_train.info()

# missing values in train data
aug_train.isnull().sum()

null_percentage = aug_train.isnull().sum() / aug_train.shape[0]
null_percentage

#FILLING THE NULL VALUES
COPY =aug_train
null_columns = null_percentage[null_percentage > 0].index
for i in null_columns:
    aug_train[i] = aug_train[i].fillna(COPY[i].mode()[0])

aug_train.isnull().sum()

"""I AM USING ONE HOT ENCODER TO FORMAT THE COLUMNS"""

# formating experience column

def experience(x:str)->int:
    if type(x) == int:
        pass
    elif '>' in x:
        x = 21
    elif '<' in x:
        x = 0
    else:
        x = int(x.strip())
    return x

aug_train['experience'] =aug_train.experience.map(experience)

# formating new_job column

def new_job(x:str)->int:

    if type(x) == int:
        pass
    elif 'n' == x[0]:
        x = 0
    elif '>' in x:
        x = 5
    else:
        x = int(x.strip())
    return x

aug_train['last_new_job'] = aug_train.last_new_job.map(new_job)

aug_train['company_size'].unique()

# formating company_size column

company_size = {
    '<10'       : 0,
    '10/49'     : 1,
    '50-99'     : 2,
    '100-500'   : 3,
    '500-999'   : 4,
    '1000-4999' : 5,
    '5000-9999' : 6,
    '10000+'    : 7
}

aug_train['company_size'] = aug_train.company_size.map(lambda x : company_size[x])

aug_train.dtypes

aug_train["relevent_experience"].unique()

aug_train["gender"].unique()

aug_train["enrolled_university"].unique()

ohe=OneHotEncoder()
feature_array=ohe.fit_transform(aug_train[["gender","enrolled_university"]]).toarray()

feature_label=ohe.categories_


feature_label=np.array(feature_label).ravel()
print(feature_label)

features=pd.DataFrame(feature_array, columns = feature_label)
train1=pd.concat([aug_train,features], axis=1)

ohe=OneHotEncoder()
feature_array=ohe.fit_transform(aug_train[["relevent_experience"]]).toarray()

feature_label=ohe.categories_


feature_label=np.array(feature_label).ravel()
print(feature_label)

features=pd.DataFrame(feature_array, columns = feature_label)
final_train=pd.concat([aug_train,features], axis=1)
final_train.head()

aug_train.isnull().sum().sum()

final_train.to_csv("aug_trained_cleaned_dataset.csv", index=False)

df.isnull().sum().sum()

df.isnull().sum()

"""Now, apply the same changes to the test data.

"""

aug_test.isnull().sum()

aug_test.drop(["enrollee_id","city","major_discipline","company_type"], axis = 1 , inplace=True)

null_percentage = aug_test.isnull().sum() / aug_test.shape[0]
null_percentage

copy = aug_test
null_columns = null_percentage[null_percentage > 0].index
for i in null_columns:
    aug_test[i] = aug_test[i].fillna(copy[i].mode()[0])

def experience(x:str)->int:
    if type(x) == int:
        pass
    elif '>' in x:
        x = 21
    elif '<' in x:
        x = 0
    else:
        x = int(x.strip())
    return x

aug_test['experience'] =aug_test.experience.map(experience)

def new_job(x:str)->int:

    if type(x) == int:
        pass
    elif 'n' == x[0]:
        x = 0
    elif '>' in x:
        x = 5
    else:
        x = int(x.strip())
    return x

aug_test['last_new_job'] = aug_test.last_new_job.map(new_job)

def relavent_exp(x:str)->int:

    if type(x) == int:
        pass
    elif 'H' == x[0]:
        x = 1
    elif 'N' in x:
        x = 0
    else:
        x = int(x.strip())
    return x

aug_test['relevent_experience'] = aug_test.relevent_experience.map(relavent_exp)

company_size = {
    '<10'       : 0,
    '10/49'     : 1,
    '50-99'     : 2,
    '100-500'   : 3,
    '500-999'   : 4,
    '1000-4999' : 5,
    '5000-9999' : 6,
    '10000+'    : 7
}

aug_test['company_size'] = aug_test.company_size.map(lambda x : company_size[x])

aug_test.dtypes

ohe=OneHotEncoder()
feature_array=ohe.fit_transform(aug_train[["gender","enrolled_university"]]).toarray()

feature_label=ohe.categories_


feature_label=np.array(feature_label).ravel()
print(feature_label)

features=pd.DataFrame(feature_array, columns = feature_label)
aug_test1=pd.concat([aug_train,features], axis=1)
aug_test1.head()

ohe=OneHotEncoder()
feature_array=ohe.fit_transform(aug_train[["relevent_experience"]]).toarray()

feature_label=ohe.categories_


feature_label=np.array(feature_label).ravel()
print(feature_label)

features=pd.DataFrame(feature_array, columns = feature_label)
final_test=pd.concat([aug_train,features], axis=1)
final_test.head()

aug_test.isnull().sum().sum()

final_test.to_csv("aug_tested_cleaned_dataset.csv", index=False)