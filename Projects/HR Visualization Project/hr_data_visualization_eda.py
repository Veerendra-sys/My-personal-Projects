# -*- coding: utf-8 -*-
"""HR  DATA Visualization EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14fIwYTVnPVNg7ijbURBWIVaOKGblIIyR
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import OneHotEncoder
import warnings
warnings.filterwarnings('ignore')
from sklearn.svm import SVC
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

test=pd.read_csv('/content/aug_tested_cleaned_dataset.csv')
train=pd.read_csv('/content/aug_trained_cleaned_dataset.csv')
sub=pd.read_csv('/content/sample_submission.csv')

test.isnull().sum().sum()

train.isnull().sum().sum()

sub.isnull().sum().sum()

"""EXPLORATORY DATA ANALYSIS"""

train.info()

train.describe()

train.columns

for col in train.columns:
    if train[col].dtype == 'object':
        categories = train[col].unique()
        print('[{}] ({})'.format(col, len(categories)))

def count_subplots(data, feature1, hue='enrolled_university', ylim=None, xlim=None, figsize=(18, 15)): # Change hue to 'enrolled_university' or another valid column
    f, ax = plt.subplots(2, figsize=figsize)  # Pass figsize to subplots
    # Pass feature1 as the 'x' argument instead of the first positional argument
    sns.countplot(x=feature1, data=data, ax=ax[0])
    ax[0].set_title('{} Count Plot'.format(feature1), size=20)
    ax[0].set_xlabel(feature1, size=15)
    ax[0].set_ylabel('Count', size=15)
    ax[0].tick_params(labelsize=15)

    sns.countplot(x=feature1, hue=hue, data=data, ax=ax[1]) # hue is now 'enrolled_university'
    ax[1].set_title('{} Count Plot'.format(feature1), size=20)
    ax[1].set_xlabel(feature1, size=15)
    ax[1].set_ylabel('Count')
    ax[1].tick_params(labelsize=15)
    if hue == 'enrolled_university': # Adjust legend labels if necessary
        ax[1].legend(['Full time course', 'Part time course', 'no_enrollment'], loc='upper right', prop={'size': 15})
    else:
        #Handle other hue values if needed
        pass

    if ylim != None:
        plt.ylim(ylim)
    if xlim != None:
        plt.xlim(xlim)

    plt.show()

count_subplots(train, 'gender',figsize=(10, 6))

"""The graph consists of two subplots analyzing gender distribution and course enrollment status.

Top Plot (Gender Count Plot):

Males make up the majority of the dataset, with a significantly higher count than Females and Others.
The number of Females and Others is much smaller in comparison.
Bottom Plot

(Gender vs. Course Enrollment):

Males dominate all course enrollment categories, with a high number enrolled in part-time courses.
A smaller proportion of Males opt for full-time courses or no enrollment.
Female and Other genders have very low representation in all course categories.
"""

count_subplots(train, 'relevent_experience',figsize=(10, 6))

"""The graph contains two subplots analyzing the distribution of relevant experience and its relation to course enrollment.

Top Plot (Relevant Experience Count Plot):

The majority of candidates have relevant experience, with their count significantly higher than those without relevant experience.
Bottom Plot

(Relevant Experience vs. Course Enrollment):

Among those with relevant experience, most are enrolled in part-time courses, while fewer opt for full-time courses or no enrollment.
Among those without relevant experience, the distribution across full-time, part-time, and no enrollment is more balanced, though the overall count is lower.
"""

count_subplots(train, 'enrolled_university',figsize=(10, 6))

"""The graph presents two subplots analyzing university enrollment and its relation to course preferences.

Top Plot (University Enrollment Count Plot):

A majority of individuals are not enrolled in any university.
Fewer individuals are enrolled in full-time courses, with part-time courses having the least enrollment.

Bottom Plot (University Enrollment vs. Course Enrollment):

Most individuals without university enrollment prefer part-time courses.
Full-time course enrollees are consistent across both plots, while part-time course enrollment remains the lowest category.
"""

count_subplots(train, 'education_level',figsize=(10, 6))

count_subplots(train, 'experience',figsize=(10, 6))

count_subplots(train, 'company_size')

count_subplots(train, 'company_type')

def factor_plots(data, feature1, feature2=None, col=None, hue=None, kind='point', ylim=None, xlim=None):
    """
    Creates a categorical plot using seaborn's catplot.

    This function is a modified version of the original `factor_plots`
    function. It now uses `seaborn.catplot` instead of the deprecated
    `seaborn.factorplot`.

    Args:
        data: The pandas DataFrame containing the data to plot.
        feature1: The name of the column to be used for the x-axis.
        feature2: The name of the column to be used for the y-axis
                  (optional, for certain plot kinds).
        col: The name of the column to be used for creating subplots
             arranged in columns.
        hue: The name of the column to be used for color encoding
             different categories.
        kind: The type of plot to create (e.g., 'point', 'count', 'bar').
        ylim: A tuple specifying the limits for the y-axis.
        xlim: A tuple specifying the limits for the x-axis.
    """
    # Check if 'hue' column exists in DataFrame, if not, skip hue
    if hue is not None and hue not in data.columns:
        print(f"Warning: Column '{hue}' not found in DataFrame. Skipping hue.")
        hue = None  # Set hue to None to avoid the error

    g = sns.catplot(x=feature1, y=feature2, col=col, hue=hue, kind=kind, data=data)
    #if feature2 != None:
    #    plt.title("{} and {}'s {} plot".format(feature1, feature2, kind))
    #else:
    #    plt.title("{}'s {} plot".format(feature1, kind))
    fig = plt.gcf()
    fig.set_size_inches(20, 6)

    if ylim is not None:
        plt.ylim(ylim)
    if xlim is not None:
        plt.xlim(xlim)

    plt.tight_layout()
    plt.show()

factor_plots(train, 'relevent_experience', kind='count', hue='target', col='enrolled_university')

"""

```
# This is formatted as code
```

We can see that 'Full time course' + 'No relevent experience' value has strong correlationship with target.
"""

factor_plots(train, 'relevent_experience',  kind = 'count', hue = 'target', col = 'education_level')

"""It shows that 'Graduate' with 'No relevent experience' has very strong correlationship with target, also Master too.


"""

factor_plots(train, 'gender',  kind = 'count', hue = 'target', col = 'relevent_experience')

"""Gender Distribution: How many individuals belong to each gender category.
Target Comparison: How target values (e.g., 0 and 1) are distributed within each gender.
Experience-Based Segmentation: How the above trends change for different relevent_experience groups.

Impact of Education on Company Type
"""

temp = train[['education_level', 'company_type']]
temp.dropna(axis=0, inplace = True)
value_counts = temp.value_counts().to_frame()
value_counts.reset_index(level=[0, 1], inplace=True)
value_counts = value_counts.rename(columns = {0:'count'})
bar, ax = plt.subplots(figsize=(20,12))
sns.barplot(x = 'education_level', y = 'count', data = value_counts, hue='company_type')
plt.xticks(rotation = 90)
plt.xlabel('Education Level')
plt.ylabel('Frequency')
plt.title('Impact of Education on Company Type', fontsize=20)

"""X-axis: Represents different levels of education (e.g., Graduate, Masters, High School, Primary School, PhD).
Y-axis: Represents the frequency (or count) of people in each education level working in different types of companies.
Bars: Each color represents a different company type (e.g., Pvt Ltd, Public Sector, Funded Startup, etc.).


Graduates have the highest employment opportunities in all company types.
Pvt Ltd companies hire the most people across all education levels.
Higher education (like Masters or PhD) is less common in this dataset but still contributes to employment.



"""

#Number of NaN per column

def percentage_nulls(df):

    number_nulls = pd.DataFrame(df.isnull().sum(),columns=['Total'])
    number_nulls['% nulls'] = round((number_nulls['Total'] / df.shape[0])*100,1)

    return number_nulls

#NaN for Trainpercentage_nulls(df_test)

percentage_nulls(train)

percentage_nulls(sub)

#NaN for Trainpercentage_nulls(df_test)

percentage_nulls(test)

"""1.Feature 'city' - City code"""

#City - Train

city_train = train['city']
city_train.value_counts()

#City - Test

city_test = test['city']
city_test.value_counts()

"""
 Feature 'city_ development _index' - Developement index of the city (scaled)

"""

#Distribution city development index - Train
sns.displot(data=train, x='city_development_index',height=6,color = 'lightblue')

"""The dataset is skewed towards well-developed cities.
Cities with a low development index are less frequent in the dataset.
The distribution is not uniform, meaning certain city development index values appear more often than others.
"""

#Distribution city development index - Train

sns.displot(data=test, x='city_development_index',height=6,color = 'coral')

"""Most cities have a high development index (~0.9 or above).
The tallest bar on the right means many cities are well-developed.
Very few cities have a low development index (~0.5 or below).
The smaller bars on the left show that less-developed cities are rare.
Some specific development index values are more common.
There are noticeable peaks at certain points, meaning some index values appear more frequently than others.
Conclusion:
The dataset contains more developed cities than less developed ones.
The distribution is not even, meaning cities are mostly concentrated around higher development index values.

Feature 'gender' - Gender of candidate
"""

gender_train = train['gender']
gender_test = test['gender']

def percentage(df):

    number = pd.DataFrame(df.value_counts())
    number.columns = ['Total']
    number['%'] = round((number['Total'] / df.notnull().sum())*100,1)

    return number

percentage(gender_train)

"""The table shows the gender distribution of individuals in a dataset.
Males make up the majority at 92.4% (1,968 individuals).
Females account for 6.4% (137 individuals).
A small percentage (1.1%) belongs to the "Other" category (24 individuals).
"""

percentage(gender_test)

"""The table shows the gender distribution of individuals in a dataset.
Males make up the majority at 92.4% (1,968 individuals).
Females account for 6.4% (137 individuals).
A small percentage (1.1%) belongs to the "Other" category (24 individuals).

As you can see the% are similar in both datasets
"""

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 6))

sns.countplot(x="gender",data=train,palette="Set1",ax=ax[0]).set_title('Train')
sns.countplot(x="gender",data=test,palette="Set1",ax=ax[1]).set_title('Test')
fig.tight_layout()
fig.show()

"""The graph shows the gender distribution in both Train and Test datasets.
Males form the majority in both datasets, significantly outnumbering other genders.
Females have a much lower count compared to males but are still present in noticeable numbers.
The "Other" gender category has the lowest count in both datasets.
The distribution pattern in the Train and Test datasets appears consistent, ensuring a balanced gender proportion across them.

Feature 'relevent_experience' - Relevant experience of candidate
"""

relevent_experience_train = train['relevent_experience']
relevent_experience_test = test['relevent_experience']

percentage(relevent_experience_train)

percentage(relevent_experience_test)

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 6))

sns.countplot(x='relevent_experience',data=train,palette="Set2",ax=ax[0]).set_title('Train')
sns.countplot(x='relevent_experience',data=test,palette="Set2",ax=ax[1]).set_title('Test')
fig.tight_layout()
fig.show()

"""Feature 'enrolled_university' - Type of University course enrolled if any"""

enrolled_university_train = train['enrolled_university']
enrolled_university_test = test['enrolled_university']
percentage(enrolled_university_train)

percentage(enrolled_university_test)

order_enrolled_university = percentage(enrolled_university_train).index

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 6))
sns.countplot(x='enrolled_university',data=train,palette="Set3",ax=ax[0],order=order_enrolled_university).set_title('Train')
sns.countplot(x='enrolled_university',data=test,palette="Set3",ax=ax[1],order=order_enrolled_university).set_title('Test')
fig.tight_layout()
fig.show()

"""The graph shows the enrollment status in a university for both Train and Test datasets.
The majority of individuals have no enrollment in any university, forming the largest category.
A smaller group is enrolled in a full-time course, making up the second-largest category.
The part-time course enrollment has the least number of individuals in both datasets.
The distribution is consistent across Train and Test datasets, ensuring similar data patterns.

Feature 'education_level' - Education level of candidate
"""

education_level_train = train['education_level']
education_level_test = test['education_level']
percentage(education_level_train)

percentage(education_level_test)

order_education_level = percentage(education_level_train).index

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 8))

sns.countplot(x='education_level',data=train,palette="Set1",ax=ax[0],order=order_education_level).set_title('Train')
sns.countplot(x='education_level',data=test,palette="Set1",ax=ax[1],order=order_education_level).set_title('Test')
fig.tight_layout()
fig.show()

"""The graph shows the distribution of education levels in both the Train and Test datasets.
The majority of individuals are Graduates, followed by those with a Master’s degree.
High School graduates form the third largest group, while PhD and Primary School individuals are the least common.
The distribution pattern is similar in both datasets, indicating balanced data.
This suggests that most individuals in the dataset have a higher level of education, with very few having only Primary School education.

Feature 'major_discipline' - Education major discipline of candidate
"""

major_discipline_train = train['major_discipline']
major_discipline_test = test['major_discipline']

percentage(major_discipline_train)

percentage(major_discipline_test)

order_major_discipline = percentage(major_discipline_train).index

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 10))

sns.countplot(x='major_discipline',data=train,palette="Set2",ax=ax[0],order=order_major_discipline).set_title('Train')
sns.countplot(x='major_discipline',data=test,palette="Set2",ax=ax[1],order=order_major_discipline).set_title('Test')
fig.tight_layout()
fig.show()

"""The graph represents the distribution of major disciplines in the Train and Test datasets.
The majority of individuals have a STEM (Science, Technology, Engineering, and Mathematics) background, making up the largest portion.
Other disciplines like Humanities, Business Degree, Arts, and No Major have significantly lower representation.
The pattern is consistent across both Train and Test datasets, indicating balanced data.
This suggests that most of the individuals in the dataset come from a technical or scientific background.

Feature 'experience' - Candidate total experience in years
"""

experience_train = train['experience']
experience_test = test['experience']
percentage(experience_train)

percentage(experience_test)

order_experience = percentage(experience_train).index
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 12))

sns.countplot(x='experience',data=train,palette="Set3",ax=ax[0],order=order_experience).set_title('Train')
sns.countplot(x='experience',data=test,palette="Set3",ax=ax[1],order=order_experience).set_title('Test')
fig.tight_layout()
fig.show()

"""The x-axis represents years of experience, while the y-axis represents the count of individuals in both Train and Test datasets.
21 years of experience has the highest frequency, meaning a large portion of the dataset consists of highly experienced individuals.
The count gradually decreases as experience decreases, following a somewhat skewed distribution.
The trend in the Train and Test datasets is nearly identical, ensuring that the test set is well-balanced compared to the training set.
Lower experience levels (0–10 years) are still well-represented, indicating a diverse range of experience levels.
The dataset might need further analysis to see if the high concentration of experienced individuals influences model bias in hiring prediction

Feature 'company_size' - No of employees in current employer's company
"""

company_size_train = train['company_size']
company_size_test = test['company_size']
percentage(company_size_train)

percentage(company_size_test)

order_company_size = percentage(company_size_train).index
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 12))

sns.countplot(x='company_size',data=train,palette="Set1",ax=ax[0],order=order_company_size).set_title('Train')
sns.countplot(x='company_size',data=test,palette="Set1",ax=ax[1],order=order_company_size).set_title('Test')
fig.tight_layout()
fig.show()

"""Feature 'company_type' - Type of current employer¶"""

company_type_train = train['company_type']
company_type_test = test['company_type']
percentage(company_type_train)

percentage(company_type_test)

order_company_type = percentage(company_type_train).index
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 12))
sns.countplot(x='company_type',data=train,palette="Set2",ax=ax[0],order=order_company_type).set_title('Train')
sns.countplot(x='company_type',data=test,palette="Set2",ax=ax[1],order=order_company_type).set_title('Test')
fig.tight_layout()
fig.show()

"""The x-axis represents company size categories, while the y-axis represents the count of individuals in both Train and Test datasets.
Category '2' has the highest frequency, meaning most individuals in the dataset come from companies of this size.
The counts gradually decrease across other categories, showing a right-skewed distribution.
The distribution in Train and Test sets is nearly identical, ensuring good representation in the test set.
This suggests that hiring trends might be influenced by company size, and further analysis is needed to determine its impact on model predictions.

Feature 'lastnewjob' - Difference in years between previous job and current job.
"""

last_new_job_train = train['last_new_job']
last_new_job_test = test['last_new_job']
percentage(last_new_job_train)

percentage(last_new_job_test)

order_last_new_job = percentage(last_new_job_train).index
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 8))
sns.countplot(x='last_new_job',data=train,palette="Set3",ax=ax[0],order=order_last_new_job).set_title('Train')
sns.countplot(x='last_new_job',data=test,palette="Set3",ax=ax[1],order=order_last_new_job).set_title('Test')
fig.tight_layout()
fig.show()

"""Insights:
The job market seems dynamic, with many people switching jobs within a year.
Understanding why certain people stay longer (5+ years) versus those who switch quickly can be valuable for employee retention analysis.
This data could be useful for predicting job-switching trends in various industries.

Feature 'training_hours' - Training hours completed
"""

sns.displot(data=train, x='training_hours',height=6,color = 'lightblue')

"""Right-Skewed Distribution:

The distribution is heavily skewed to the right, meaning most individuals spend fewer training hours, with a gradual decline as training hours increase.
A majority of individuals have training hours in the range of 0 to 100 hours.
Peak at Lower Training Hours:

The highest frequency is observed in the 0–50 hours range, indicating that most individuals engage in short training durations.
There is a steep drop after 50 training hours, showing that fewer individuals spend extended time in training programs.
Few Outliers with High Training Hours:

A small number of individuals have over 200+ training hours, suggesting specialized or intensive training programs.
These outliers might represent highly skilled professionals or those undergoing extended learning.
Possible Interpretation:

The trend suggests that most employees undergo only essential training, with fewer engaging in longer skill development programs.
Organizations might be offering short-term training for upskilling rather than long-term programs.
This could be used to analyze employee retention, job readiness, or career progression trends.
"""

#Distribution of training hours - Test
sns.displot(data=train, x='training_hours',height=6,color = 'coral')

"""Right-Skewed Distribution:

The majority of individuals have training hours below 100, with a sharp decline as training hours increase.
Most training sessions are short rather than long-term commitments.
Peak in the 0-50 Hours Range:

The highest count is observed between 0-50 hours, suggesting that most employees undergo basic training.
A noticeable drop-off in individuals undergoing more than 100 hours of training.
Long-Tail Effect:

A small number of individuals have 200+ training hours, indicating specialized or extensive training programs.
These could be highly motivated learners or those in specific industries that require deep expertise.
Business Implications:

If linked with job performance, hiring trends, or career transitions, this distribution could provide insights into the effectiveness of training programs.
Further segmentation (e.g., by job role, experience level, or department) could enhance understanding of training investment across different employee groups.
"""

train.columns

# List of categorical columns to visualize as pie charts
columns_to_plot = [
    "gender", "relevent_experience", "enrolled_university",
    "education_level", "major_discipline", "experience",
    "company_size", "company_type", "last_new_job"
]

# Create pie charts for each column
for column in columns_to_plot:
    plt.figure(figsize=(8, 8))  # Set figure size
    category_counts = train[column].value_counts()  # Count occurrences

    # Plot Pie Chart
    plt.pie(category_counts, labels=category_counts.index, autopct='%1.1f%%',
            startangle=140, colors=plt.cm.Paired.colors, wedgeprops={'edgecolor': 'black'})

    plt.title(f"Distribution of {column}")  # Title
    plt.show()  # Display chart

"""1️⃣ Gender Distribution
The pie chart shows the gender breakdown of the enrollees.
Categories: Male, Female, Other (if any)
If one category dominates, it means that a particular gender is more represented in the dataset.




2️⃣ Relevant Experience
This chart represents whether the enrollee has prior relevant experience in the field.
Categories: "Has relevant experience", "No relevant experience"
If "Has relevant experience" is larger, it suggests that most candidates are already experienced.
If "No relevant experience" is larger, it indicates that many enrollees are career changers or freshers.





3️⃣ Enrolled University
This pie chart shows the type of university enrollment of the candidates.
Categories: "Full-time course", "Part-time course", "No enrollment"
A high percentage of "No enrollment" may indicate that many candidates are not pursuing formal education.





4️⃣ Education Level
This chart represents the highest education level attained by candidates.
Categories: "Primary School", "High School", "Graduate", "Postgraduate", "PhD"
If graduate/postgraduate dominates, it suggests that most candidates hold a bachelor's or master’s degree.






5️⃣ Major Discipline
Displays the academic major distribution.
Categories: "STEM (Science, Technology, Engineering, Mathematics)", "Non-STEM", "Other"
A dominance of STEM majors suggests that the dataset consists mostly of technical backgrounds.





6️⃣ Experience
Represents the years of experience of candidates.
Categories: Different experience ranges (e.g., 0, 1, 2, 5, 10+ years)
If 0 years has a high percentage, it indicates a high number of freshers.
If higher years dominate, it suggests the dataset is skewed toward experienced professionals.





7️⃣ Company Size
Shows the size of the previous company where candidates worked.
Categories: "Small (<50 employees)", "Medium (50-500)", "Large (500+)"
If large companies dominate, it suggests candidates have experience in corporate environments.
If small companies dominate, it indicates experience in startups or small businesses.










8️⃣ Company Type
Represents the type of company candidates worked for.
Categories: "Pvt Ltd", "Public Sector", "NGO", "Startup", etc.
A large proportion in Private Limited (Pvt Ltd) suggests corporate/private sector dominance.
If public sector is higher, it suggests government-sector dominance.





9️⃣ Last New Job
Shows the time since the candidate’s last job change.
Categories: "Never", "1 year", "2 years", "3 years", "4+ years"
A high proportion of "Never" indicates many candidates are seeking their first job.
If many candidates have recently switched jobs, it could indicate a highly competitive job market.








Summary
These pie charts help understand the distribution of enrollees across different categories.
Some categories (e.g., experience, company type) might be skewed, indicating certain trends in the dataset.
If a category is evenly distributed, it suggests diversity in that attribute.
"""

# List of categorical columns to visualize as pie charts
columns_to_plot = [
    "gender", "relevent_experience", "enrolled_university",
    "education_level", "major_discipline", "experience",
    "company_size", "company_type", "last_new_job"
]

# Create pie charts for each column
for column in columns_to_plot:
    plt.figure(figsize=(8, 8))  # Set figure size
    category_counts = test[column].value_counts()  # Count occurrences

    # Plot Pie Chart
    plt.pie(category_counts, labels=category_counts.index, autopct='%1.1f%%',
            startangle=140, colors=plt.cm.Paired.colors, wedgeprops={'edgecolor': 'black'})

    plt.title(f"Distribution of {column}")  # Title
    plt.show()  # Display chart

"""1️⃣ Gender Distribution The pie chart shows the gender breakdown of the enrollees. Categories: Male, Female, Other (if any) If one category dominates, it means that a particular gender is more represented in the dataset.

2️⃣ Relevant Experience This chart represents whether the enrollee has prior relevant experience in the field. Categories: "Has relevant experience", "No relevant experience" If "Has relevant experience" is larger, it suggests that most candidates are already experienced. If "No relevant experience" is larger, it indicates that many enrollees are career changers or freshers.

3️⃣ Enrolled University This pie chart shows the type of university enrollment of the candidates. Categories: "Full-time course", "Part-time course", "No enrollment" A high percentage of "No enrollment" may indicate that many candidates are not pursuing formal education.

4️⃣ Education Level This chart represents the highest education level attained by candidates. Categories: "Primary School", "High School", "Graduate", "Postgraduate", "PhD" If graduate/postgraduate dominates, it suggests that most candidates hold a bachelor's or master’s degree.

5️⃣ Major Discipline Displays the academic major distribution. Categories: "STEM (Science, Technology, Engineering, Mathematics)", "Non-STEM", "Other" A dominance of STEM majors suggests that the dataset consists mostly of technical backgrounds.

6️⃣ Experience Represents the years of experience of candidates. Categories: Different experience ranges (e.g., 0, 1, 2, 5, 10+ years) If 0 years has a high percentage, it indicates a high number of freshers. If higher years dominate, it suggests the dataset is skewed toward experienced professionals.

7️⃣ Company Size Shows the size of the previous company where candidates worked. Categories: "Small (<50 employees)", "Medium (50-500)", "Large (500+)" If large companies dominate, it suggests candidates have experience in corporate environments. If small companies dominate, it indicates experience in startups or small businesses.

8️⃣ Company Type Represents the type of company candidates worked for. Categories: "Pvt Ltd", "Public Sector", "NGO", "Startup", etc. A large proportion in Private Limited (Pvt Ltd) suggests corporate/private sector dominance. If public sector is higher, it suggests government-sector dominance.

9️⃣ Last New Job Shows the time since the candidate’s last job change. Categories: "Never", "1 year", "2 years", "3 years", "4+ years" A high proportion of "Never" indicates many candidates are seeking their first job. If many candidates have recently switched jobs, it could indicate a highly competitive job market.

Summary These pie charts help understand the distribution of enrollees across different categories. Some categories (e.g., experience, company type) might be skewed, indicating certain trends in the dataset. If a category is evenly distributed, it suggests diversity in that attribute.


"""

